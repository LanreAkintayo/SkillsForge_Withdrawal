{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/FundsLock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport  \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract FundsLock is ReentrancyGuard, Ownable {\r\n\r\n    error FundsLock__ZeroValue();\r\n    error FundsLock__BalanceExceeded();\r\n    error FundsLock__InvalidArgs();\r\n    error FundsLock__InsufficientFunds();\r\n    error FundsLock__DepositNotFound();\r\n    error FundsLock__DepositNotForCaller();\r\n    error FundsLock__FundsStillLockUp();\r\n    error FundsLock__InsufficientFundsInReserve();\r\n    error FundsLock__FundsWithdrawFailed();\r\n    error FundsLock__AlreadyWithdrawn();\r\n\r\n    event FundsDepositedWithInterval(address indexed depositor, uint256[] indexed amount, uint256[] indexed duration);\r\n    event FundsDeposited(address indexed depositor, uint256 indexed amount, uint256 indexed duration);\r\n    event InterestsSet(uint256[] indexed durations, uint256[] indexed interests);\r\n    event FundsWithdrawn(bytes16 indexed depositId, uint256 indexed totalFunds);\r\n\r\n\r\n    struct DepositInfo {\r\n        address depositor;\r\n        uint256 amount;\r\n        uint256 depositTime;\r\n        uint256 duration;\r\n        bool claim;\r\n        bytes16 id;\r\n    }\r\n\r\n    mapping(bytes16 => DepositInfo) private s_userFunds;\r\n    mapping(uint256 => uint256) private s_durationToInterest;   // You earn interest based on how long your funds is locked up\r\n    mapping(address => bytes16[]) private s_allUserDeposits;\r\n\r\n    uint256[] private s_durations;\r\n    uint256[] private s_interestPercentages;\r\n\r\n    uint256 private s_idGenerator = 0;\r\n\r\n    uint256 private constant AMOUNT_PRECISION = 10_000; // For better percentage precision\r\n\r\n     fallback() external payable {\r\n    }\r\n\r\n    receive() external payable {\r\n    }\r\n\r\n    /**\r\n     * @notice A function that sets the duration and its corresponding interest. Only the owner can call this function\r\n     * @param durations  This is an array of the durations (in seconds)\r\n     * @param interests  This is an array of the interests (every percentage is multiplied by 100 for better precision) \r\n     */\r\n    function setInterests(uint256[] memory durations, uint256[] memory interests) external onlyOwner {\r\n        if (durations.length != interests.length){\r\n            revert FundsLock__InvalidArgs();\r\n        }\r\n\r\n        delete s_durations;\r\n        delete s_interestPercentages;\r\n\r\n        for (uint i = 0; i < durations.length; i++){\r\n            s_durations.push(durations[i]);\r\n            s_interestPercentages.push(interests[i]);\r\n        }\r\n\r\n        emit InterestsSet(durations, interests);\r\n    }\r\n\r\n      /**\r\n     * @notice A function that users call to deposit funds (ETH) into the contract.\r\n     * @param duration  This specifies how long the funds should be locked in the contract (in seconds)\r\n     */\r\n    function depositFunds(uint256 duration) external payable nonReentrant{\r\n        uint256 amount = msg.value;\r\n        if (amount <= 0 || duration <= 0){\r\n            revert FundsLock__ZeroValue();\r\n        }\r\n\r\n        if (amount > msg.sender.balance){\r\n            revert FundsLock__BalanceExceeded();\r\n        }\r\n\r\n        bytes16 depositId = _generateDepositID(msg.sender);\r\n\r\n         DepositInfo memory newDepositInfo = DepositInfo({\r\n                depositor: msg.sender,\r\n                amount: amount,\r\n                depositTime: block.timestamp,\r\n                duration: duration,\r\n                claim: false,\r\n                id: depositId\r\n            });\r\n\r\n        s_allUserDeposits[msg.sender].push(depositId);\r\n        s_userFunds[depositId] = newDepositInfo;\r\n        s_idGenerator++;\r\n\r\n        emit FundsDeposited(msg.sender, amount, duration);\r\n    }\r\n\r\n      /**\r\n     * @notice A function that allows users to set multiple withdrawal intervals for different portions of their deposited funds\r\n     * @param amount  This is an array of the amount to deposit\r\n     * @param duration  This is an array of the withdrawal intervals (in seconds)\r\n     */\r\n    function depositFundsWithInterval(uint256[] memory amount, uint256[] memory duration) external payable nonReentrant {\r\n        if (amount.length != duration.length){\r\n            revert FundsLock__InvalidArgs();\r\n        }\r\n\r\n        uint256 totalAmount = getTotalAmount(amount);\r\n\r\n        if (totalAmount > msg.value){\r\n            revert FundsLock__InsufficientFunds();\r\n        }\r\n\r\n        if (totalAmount > msg.sender.balance){\r\n            revert FundsLock__BalanceExceeded();\r\n        }\r\n\r\n        for (uint i = 0; i < amount.length; i++){\r\n            uint256 currentAmount = amount[i];\r\n            uint256 currentDuration = duration[i];\r\n            bytes16 depositId = _generateDepositID(msg.sender);\r\n\r\n            DepositInfo memory newDepositInfo = DepositInfo({\r\n                depositor: msg.sender,\r\n                amount: currentAmount,\r\n                depositTime: block.timestamp,\r\n                duration: currentDuration,\r\n                claim: false,\r\n                id: depositId\r\n            });\r\n\r\n            s_allUserDeposits[msg.sender].push(depositId);\r\n            s_userFunds[depositId] = newDepositInfo;\r\n            s_idGenerator++;\r\n        }\r\n        emit FundsDepositedWithInterval(msg.sender, amount, duration);\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice This is a function called by the users to withdraw their deposited funds.\r\n     * @param depositId This is a uniqueId that specifies the funds to be withdrawn. Every deposited funds have their unique Id\r\n     */\r\n    function withdrawFunds(bytes16 depositId) external nonReentrant{\r\n        DepositInfo memory depositInfo = s_userFunds[depositId];\r\n        if (depositInfo.depositor == address(0)){\r\n            revert FundsLock__DepositNotFound();\r\n        }\r\n        if (depositInfo.depositor != msg.sender){\r\n            revert FundsLock__DepositNotForCaller();\r\n        }\r\n        if (depositInfo.claim == true){\r\n            revert FundsLock__AlreadyWithdrawn();\r\n        }\r\n        if (block.timestamp < depositInfo.depositTime + depositInfo.duration){\r\n            revert FundsLock__FundsStillLockUp();\r\n        }\r\n\r\n        uint256 interest = getInterest(depositInfo.amount, depositInfo.depositTime);\r\n\r\n        uint256 totalFunds = depositInfo.amount + interest;\r\n\r\n        if (address(this).balance < totalFunds){\r\n            revert FundsLock__InsufficientFundsInReserve();\r\n        }\r\n        s_userFunds[depositId].claim = true;\r\n\r\n        // Send the funds to the depositor \r\n        (bool success,) = msg.sender.call{value: totalFunds}(\"\");\r\n        if (!success){\r\n            revert FundsLock__FundsWithdrawFailed();\r\n        }\r\n\r\n        emit FundsWithdrawn(depositId, totalFunds);\r\n\r\n    }\r\n\r\n       /**\r\n     * @notice This function converts an unsigned integer to a bytes16 value\r\n     * @param x This specifies the unsigned integer to convert.\r\n     * @return b This is the bytes conversion of the unsigned integer\r\n     */\r\n    function _toBytes16(uint256 x) internal pure returns (bytes16 b) {\r\n        return bytes16(bytes32(x));\r\n    }\r\n\r\n       /**\r\n     * @notice This function generates an ID based on the parameters passed to it\r\n     * @param w This is an address of the user depositing funds\r\n     * @param x This is the id generator that gets incremented anytime a deposit is detected\r\n     * @param y This is the time the deposit is made\r\n     * @param z This is a byte value that contributes to generating the ID\r\n     * @return b This is the ID returned\r\n     */\r\n    function _generateID(\r\n        address w,\r\n        uint256 x,\r\n        uint256 y,\r\n        bytes1 z) internal pure returns (bytes16 b) {\r\n        b = _toBytes16(uint256(keccak256(abi.encodePacked(w, x, y, z))));\r\n    }\r\n\r\n       /**\r\n     * @notice This generates the deposit ID\r\n     * @param _user This is the address of the depositor\r\n     * @return depositId This is the deposit Id\r\n     */\r\n    function _generateDepositID(address _user) internal view returns (bytes16 depositId){\r\n        return _generateID( _user, s_idGenerator, block.timestamp, 0x01);\r\n    }\r\n\r\n       /**\r\n     * @notice This function returns the accumulation of all the amount passed in the array\r\n     * @param amount This is an array of the amounts to be accumulated\r\n     * @return uint256 The accumulated value is returned\r\n     */\r\n    function getTotalAmount(uint256[] memory amount) public pure returns(uint256){\r\n        uint256 totalAmount = 0;\r\n        for (uint256 i = 0; i < amount.length; i++){\r\n            totalAmount += amount[i];\r\n        }\r\n        return totalAmount;\r\n    } \r\n\r\n       /**\r\n     * @notice Calculates interest based on the amount and the time it was deposited\r\n     * @param amount This specifies the amount to calculate interest on\r\n     * @param depositTime This specifies the time the amount was deposited\r\n     * @return the interest\r\n     */\r\n    function getInterest(uint256 amount, uint256 depositTime) public view returns(uint256){\r\n        uint256 timeElapsed = block.timestamp - depositTime;\r\n        uint256 interest = 0;\r\n\r\n        for (int256 index = int(s_durations.length - 1); index >= 0; index--){\r\n            uint256 i = uint256(index);\r\n            uint256 currentDuration = s_durations[i];\r\n        \r\n            if (timeElapsed >= currentDuration){\r\n                interest = (s_interestPercentages[i] * amount) / AMOUNT_PRECISION;\r\n                break;\r\n            }\r\n        }  \r\n\r\n        return interest;\r\n    }\r\n\r\n       /**\r\n     * @notice Gets all the ids of the deposited funds of the user\r\n     * @param user This specifies the user that needs to obtain the ids\r\n     * @return an array of all the ids\r\n     */\r\n    function getUserDepositIds(address user) external view returns(bytes16[] memory){\r\n        return s_allUserDeposits[user];\r\n    }\r\n\r\n       /**\r\n     * @notice Gets the details of a deposit specified by the depositId\r\n     * @param depositId This is the ID that the details needs to be obtained\r\n     * @return the details of the deposited funds\r\n     */\r\n    function getUserDeposit(bytes16 depositId) external view returns(DepositInfo memory){\r\n        return s_userFunds[depositId];\r\n    }\r\n\r\n}\r\n\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 300
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}